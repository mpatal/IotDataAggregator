// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AggregatorService.ServiceClients
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HistorianService.
    /// </summary>
    public static partial class HistorianServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// </param>
            /// <param name='datapointId'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static object AddDeviceData(this IHistorianService operations, string deviceId, string datapointId = default(string), System.DateTime? timestamp = default(System.DateTime?), double? value = default(double?))
            {
                return operations.AddDeviceDataAsync(deviceId, datapointId, timestamp, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// </param>
            /// <param name='datapointId'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddDeviceDataAsync(this IHistorianService operations, string deviceId, string datapointId = default(string), System.DateTime? timestamp = default(System.DateTime?), double? value = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDeviceDataWithHttpMessagesAsync(deviceId, datapointId, timestamp, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
